
23. How to find sub array with maximum sum in an array of positive and negative number?

Time - O(N), Space - O(1)
-------------------------------------------------------------
class Solution {
    public int maxSubArray(int[] nums) {
        
       int sum = nums[0];
       int max = nums[0];
       for(int i=1; i<nums.length; i++){
            
            if(sum < 0){
                sum = nums[i];
            } else{
               sum = sum + nums[i]; 
            }                
            
           max = Math.max(max, sum);
          
       }
       return max;
    }
}
---------------------------------------------------------------


[2] Divider Conquer
---------------------------------------------------------------
class Solution {
    
    public int maxSubArray(int[] nums) {
        
       return subMax(nums, 0, nums.length-1);
    }
    
    public int subMax(int [] nums, int start, int end){
        
        if(start == end)
            return nums[start];
        
        int mid = start + (end-start)/2;
        int left = subMax(nums, start, mid);
        int right = subMax(nums, mid+1, end);
        
        int leftMax = nums[mid];
        int leftSum = nums[mid];
        for(int i=mid-1; i>=0; i--){
            
            leftSum += nums[i];
            if(leftSum > leftMax)
                leftMax = leftSum;
        }
       
        int rightMax = nums[mid+1];
        int rightSum = nums[mid+1];
        for(int i=mid+2; i <= end; i++){
            
            rightSum += nums[i];
            if(rightSum > rightMax)
                rightMax = rightSum;
        }
        
        return Math.max(Math.max(left, right), leftMax + rightMax);             
    }
}

// [3] Dynamic Programming
class Solution {
    
    public int maxSubArray(int[] nums) {
        
       int max = nums[0];
        
       for(int i=1; i<nums.length; i++){
           
           if(nums[i-1] > 0)
               nums[i] = nums[i-1] + nums[i];
           
           if(nums[i] > max)
               max = nums[i];
       }
        
       return max;
    }
    
   
}

