// Word Search II
// https://leetcode.com/problems/word-search-ii/


class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        
        List<String> ret = new ArrayList<>();
        for(int i=0; i<words.length; i++){
            if(search(board, words[i]))
                ret.add(words[i]);
        }
        
        return ret;        
    }
    
    private boolean search(char[][] board, String word){
        
        boolean [][] visit = new boolean[board.length][board[0].length];
        
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                
                if(word.charAt(0) == board[i][j]){
                    if(trace(board, i, j, word, 0, visit))
                        return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean trace(char[][] board, int i, int j, String word, int wordInx, boolean [][] visit){
        
        if(wordInx >= word.length())
            return false;
        if(word.charAt(wordInx) != board[i][j])
            return false;
        
        if((word.charAt(wordInx) == board[i][j]) && (wordInx == word.length()-1))
            return true;
        
        visit[i][j] = true;
        
        if((i-1 >= 0) && (!visit[i-1][j]))
            if(trace(board, i-1, j, word, wordInx+1, visit))
                return true;
        if((i+1 < board.length) && (!visit[i+1][j]))
            if(trace(board, i+1, j, word, wordInx+1, visit))
                return true;
         if((j-1 >=0) && (!visit[i][j-1]))
            if(trace(board, i, j-1, word, wordInx+1, visit))
                return true;
         if((j+1 < board[0].length) && (!visit[i][j+1]))
            if(trace(board, i, j+1, word, wordInx+1, visit))
                return true;
        
        visit[i][j] = false;
        return false;
    }
}
