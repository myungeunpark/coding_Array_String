Heap SorT (MAX HEAP)

-------------------------------------------------------------------
public class Heap {

	private void heapify(int [] nums, int root, int end) {
		
		if(root >= end)
			return;
		
		int left = root * 2 + 1;
		int right = root * 2 + 2;
				
		int large = root; 
		if((left <= end) && (nums[large] < nums[left])) 
			large = left;
		if((right <= end) && (nums[large] < nums[right]))
			large = right;
		
		if(nums[large] != nums[root]) {
			swap(nums, large, root);
			heapify(nums, large, end);
		}		
	}
	
	private void swap(int[] nums, int i, int j) {
		
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
		
	private void makeHeap(int [] nums) {
		
		int parent = nums.length/2 - 1;
		for(int i=parent; i >=0; i--) {
			heapify(nums, i, nums.length-1);
		}
		
		System.out.println("make heap");
		for(int i=0; i< nums.length; i++) {
			System.out.print(nums[i] + "->");
		}
		System.out.println("");
	}
	public void sort(int [] nums) {
		
		makeHeap(nums);
		for(int i=nums.length-1; i > 0 ; i--) {
			swap(nums, 0, i);
			heapify(nums, 0, i-1);
		}
	}
}
-------------------------------------------------------------------

