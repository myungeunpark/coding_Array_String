// Walls and Gates
// https://leetcode.com/problems/walls-and-gates/

class Solution {
    
    private void dfs(int [][] rooms, int i, int j, int count){
        
        int max = 0; 
        
        int val = rooms[i][j];
        if(val == -1)
            return;
        
        if(val == Integer.MAX_VALUE || val == 0){
            rooms[i][j] = count; 
            
        }else{
            
            if(rooms[i][j] <= count)
                return;
            
            rooms[i][j] = count; 
        }     
        
        if((j-1 >= 0) && (rooms[i][j-1] != -1) && (rooms[i][j-1] != 0))                
            dfs(rooms, i, j-1, count+1);
        if((i-1 >= 0) && (rooms[i-1][j] != -1) && (rooms[i-1][j] != 0))
            dfs(rooms, i-1, j, count+1);            
        if((j+1 < rooms[i].length) && (rooms[i][j+1] != -1) && (rooms[i][j+1] != 0))
            dfs(rooms, i, j+1, count+1);
        if((i+1 < rooms.length) && (rooms[i+1][j] != -1) && (rooms[i+1][j] != 0))
            dfs(rooms, i+1, j, count+1);
    }
    
    public void wallsAndGates(int[][] rooms) {
        
        for(int i=0; i<rooms.length; i++){
            for(int j=0; j<rooms[i].length; j++){
                
                if(rooms[i][j] == 0)
                    dfs(rooms, i, j, 0);   
            }
        }
        
    }
}
