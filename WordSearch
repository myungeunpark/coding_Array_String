// word search 
// https://leetcode.com/problems/word-search/
class Solution {
    
   
    
    public boolean exist(char[][] board, String word) {
       
        char startChar = word.charAt(0);
        
        boolean [][] visit = new boolean[board.length][board[0].length];
        
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                
                if(startChar == board[i][j]){
                    if(trace(board, visit, i, j, word, 0)){                        
                        return true;
                    }
                        
                }
            }
        }
        
        return false;
        
    }
       
    
    private boolean trace(char[][] board, boolean [][] visit, int x, int y, String word, int inx){
         
         if(inx >= word.length())
             return false;
        
         if(word.charAt(inx) != board[x][y])
             return false;
        
         if((word.charAt(inx) == board[x][y]) && (inx == word.length()-1))
             return true;
        
         visit[x][y] = true;         
            
        if(((x-1) >= 0) && (!visit[x-1][y])){           
           if(trace(board, visit, x-1, y, word, inx+1))
               return true;
        }   
        if(((x+1) < board.length) && (!visit[x+1][y])){           
           if(trace(board, visit, x+1, y, word, inx+1))
               return true;
        }
        if(((y-1) >= 0) && (!visit[x][y-1])){           
           if(trace(board, visit, x, y-1, word, inx+1))
               return true;
        }
        if(((y+1) < board[0].length) && (!visit[x][y+1])){               
           if(trace(board, visit, x, y+1, word, inx+1))
               return true;
        } 
        
        visit[x][y] = false;
        return false;
    }
}
