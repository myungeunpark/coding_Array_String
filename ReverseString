// [1] Using Recursive
class Solution {
    public void reverseString(char[] s) {
        
        swap(s, 0, s.length-1);       
    }
    
    private void swap(char [] s, int left, int right){
        
        if(left >= right) return;
        
        char temp = s[left];
        s[left] = s[right];
        s[right] = temp;
        left++;
        right--;
        
        swap(s, left, right);
    }        
}


//------------------------------------------------------------
// [2] Using two points
// Time :  O(N)  , Space : O(1) 
class Solution {
    public void reverseString(char[] s) {
        
        int mid = s.length/2;
        for(int i=0; i<mid; i++)            
            swap(s, i, s.length-1-i);          
    }
    
    private void swap(char [] s, int i, int j){
        
        char temp = s[i];
        s[i] = s[j];
        s[j] = temp;            
    }
        
}

// Kotlin
class Solution {
    fun reverseString(s: CharArray): Unit {
        
        val mid = s.size/2;
        for(i in 0..mid-1)            
            swap(s, i, s.size-1-i);    
    }
    
    fun swap(s: CharArray, i : Int, j:Int): Unit{
        
        val temp = s[i]
        s[i] = s[j]
        s[j] = temp
    }
}
